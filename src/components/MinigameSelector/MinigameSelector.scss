@import "../../variables";
$grid-columns: 3;

.minigameHeader {
  grid-column: span 6;
  position: relative;
  z-index: 1;
  text-transform: uppercase;
}

.minigameSelector {
  position: absolute;
  top: 3.5em;
  z-index: 3;
  background: white;
  width: 95%;
  border: $border-standard;
  border-radius: $border-radius-standard;
  box-shadow: $shadow-standard;

  display: grid;
  grid-template-columns: repeat($grid-columns, 1fr);
  grid-auto-rows: 1fr;
}

.minigameOption {
  grid-column: span 1;
  font-size: 16px;
  border: $border-standard;
  width: 100%;
  height: 100%;
  padding: 15px;

  // Leftmost column
  &:nth-of-type(#{$grid-columns}n + 1) {
    border-width: 0 1px 1px 0;
  }
  // Central Colummn
  &:nth-of-type(#{$grid-columns}n + 2) {
    border-width: 0 1px 1px 0;
  }
  // Rightmost Column
  &:nth-of-type(#{$grid-columns}n + 3) {
    border-width: 0 0 1px 0;
  }

  // https://keithclark.co.uk/articles/targeting-first-and-last-rows-in-css-grid-layouts/
  // ðŸ˜¬ This gnarly selector targets only items in the last
  // row of the grid, whether that row is full or not.
  &:nth-child(#{$grid-columns}n + 1):nth-last-child(-n
      + #{$grid-columns}),
  &:nth-child(#{$grid-columns}n + 1):nth-last-child(-n
      + #{$grid-columns})
    ~ button {
    border-bottom-width: 0;
  }
}
